{"version":3,"sources":["ngCacheService.js"],"names":["angular","module","factory","$window","$q","$timeout","cacheStorage","repository","POLY_FILL","name","dbName","entityName","options","storage","open","deferred","defer","resolve","promise","save","setItem","key","value","savedStatus","removeItem","maxAge","console","warn","get","getItem","data","remove","hasOwnProperty","reject","length","size","clear","log","e","storeQuotaExceeded","quotaExceeded","code","number","saveHandle","storeType","clearCache","db","e1","deletedCacheCount","storeKey","deletableCacheItems","cancel","then","incrementDeletedCache","e2","error","localStorageDB","localStorage","localSessionStorage","sessionStorage","localIndexedDB","version","indexedDB","IndexedDB","mozIndexedDB","webkitIndexedDB","msIndexedDB","errorMessage","IDBTransaction","webkitIDBTransaction","msIDBTransaction","IDBKeyRange","webkitIDBKeyRange","msIDBKeyRange","request","onupgradeneeded","target","result","transaction","onerror","objectStoreNames","contains","deleteObjectStore","createObjectStore","onsuccess","message","trans","objectStore","put","storageRequestSuccess","used","remaining","storageRequestFailure","navigator","webkitTemporaryStorage","queryUsageAndQuota","webkitStorageInfo","TEMPORARY","onblocked","count","localWebSQL","dbDescription","dbSize","entitySize","openDatabase","tx","createTable","executeSql","onfailure","SYNTAX_ERR","insertData","oninsertsuccess","selectData","rows","item","cacheValue","flush","deleteData","status","deleteTable","tableSize","Size","storageExist","storageType","uid","Date","valueOf","toString","savePromise","store","lsdbSavedStatus","lssdbSavedStatus","description","cacheType","LOCAL_STORAGE","SESSION_STORAGE","INDEXED_DB","WEB_SQL","getStorage","init","initData","indexedDBPreprocessor","info","webSQLPreprocessor","localStoragePreprocessor","sessionStoragePreprocessor","polyFillPreprocessor","toJson","lidb","lwdb","lsdb","lssdb","singleton","prototype","instance","getNewInstance","create"],"mappings":"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","file":"angular-cache-service.min.js","sourcesContent":["/**\r\n * version: 0.0.1\r\n * 10-09-2015 \r\n * The cache service handles client-side caching (almost about any object can\r\n * be cached on the client). The cache mechanism implemented by this service\r\n * uses either { indexedDB | webSQL | localStorage | sessionStorage | polyFill }\r\n * in the specified order of availability. To ensure better performance, when\r\n * used in pagination, only pages navigated by users shoube be cached. For example: in\r\n * a page 1 to 10 result; if user navigate page 1, 3 and 7; only the mentioned\r\n * three pages (1, 3 & 7) should be cached....however it's still up to you to determine what's cached.\r\n */\r\nangular.module(\"a2o4.storage\", [])\r\n/**\r\n * @param {$window} The window object.\r\n * @param {$q} The deferred object.\r\n * @param {$q} The timeout object.\r\n */\r\n.factory(\"cacheService\", [ \"$window\", \"$q\", \"$timeout\", function($window, $q, $timeout) {\r\n   var cacheStorage = function() {\r\n   };\r\n   \r\n   var repository = function() {\r\n         /**\r\n          * This POLY_FILL serves as an extension of browser storage capability. It\r\n          * would automatically be used should any of the following not be available { indexedDB | webSQL | localStorage | sessionStorage }\r\n          */\r\n        var POLY_FILL = {};\r\n           // marker for POLY_FILL\r\n           POLY_FILL.name = \"POLY_FILL\";\r\n           // database name\r\n           POLY_FILL.dbName = \"cacheDB\";\r\n           // entity name\r\n           POLY_FILL.entityName = \"cacheTable\";\r\n           // poly fill options\r\n           POLY_FILL.options = {};\r\n           // poly fill storage space\r\n           POLY_FILL.storage = {};\r\n           \r\n            // return reference to poly fill\r\n           POLY_FILL.open = function() {\r\n                var deferred = $q.defer();\r\n                // update dbName and entityName on DB open\r\n                POLY_FILL.dbName = POLY_FILL.options.dbName;\r\n                POLY_FILL.entityName = POLY_FILL.options.entityName;\r\n                $timeout(function() {\r\n                   deferred.resolve(POLY_FILL);\r\n                });\r\n                return deferred.promise;\r\n             };\r\n            /** \r\n             * Function for caching a data. \r\n             * key must be truthy -> not (null | undefined | NaN | \"\" | 0 | false)\r\n             * @param {key} the key for data to be cached\r\n             * @param {value} the actual data to cache\r\n             */\r\n            POLY_FILL.save = POLY_FILL.setItem = function(key, value) {\r\n              var deferred = $q.defer(),\r\n                 savedStatus = false;\r\n              \r\n              if (key) {\r\n                 POLY_FILL.storage[key] = value;\r\n                 savedStatus = true;\r\n                 \r\n                 // invalidate current cached page after specified max period\r\n                 $timeout(function() {\r\n                    POLY_FILL.removeItem(key);\r\n                 }, POLY_FILL.options.maxAge);\r\n              } else {\r\n                 console.warn(\"key should be a valid truthy\");\r\n              }\r\n              \r\n              $timeout(function() {\r\n                 deferred.resolve(savedStatus);\r\n              });\r\n              \r\n              return deferred.promise;\r\n           };\r\n           /** \r\n            * Function to retrieve existing cache data\r\n            * key must be defined\r\n            * @param {key} the key for data to be retrieved\r\n            */\r\n           POLY_FILL.get = POLY_FILL.getItem = function(key) {\r\n              var deferred = $q.defer();\r\n              var data = POLY_FILL.storage[key];\r\n              \r\n              if (data) {\r\n                 $timeout(function() {\r\n                    deferred.resolve(data);\r\n                 });\r\n              } else {\r\n                 $timeout(function() {\r\n                   deferred.resolve(null);\r\n                 });\r\n              }\r\n              \r\n              return deferred.promise;\r\n           };\r\n           /** \r\n            * Function to delete an existing cache data\r\n            * key must be defined and part of exisiting keys\r\n            * @param {key} the key for data to be deleted\r\n            */\r\n           POLY_FILL.remove = POLY_FILL.removeItem = function(key) {\r\n              var deferred = $q.defer();\r\n              if (POLY_FILL.storage.hasOwnProperty(key)) {\r\n                 // delete POLY_FILL.storage[key];\r\n                 POLY_FILL.storage[key] = null;\r\n                 $timeout(function() {\r\n                    deferred.resolve();\r\n                 });\r\n              } else {\r\n                 deferred.reject();\r\n              }\r\n              \r\n              return deferred.promise;\r\n           };\r\n           /** \r\n            * Function to compute current size of cache, as per number of cache items\r\n            */\r\n           POLY_FILL.length = function() {\r\n              var deferred = $q.defer(),\r\n                 size = 0,\r\n                 key;\r\n              \r\n                for (key in POLY_FILL.storage) {\r\n                   // exclude function properties from size counting\r\n                   if (POLY_FILL.storage.hasOwnProperty(key)) {\r\n                       size++;\r\n                   } \r\n                }\r\n                \r\n                $timeout(function() {\r\n                   deferred.resolve(size);\r\n                });\r\n                \r\n                return deferred.promise;\r\n            };\r\n            /** \r\n             * Function to clear entire cache space\r\n             */\r\n            POLY_FILL.clear = function() {\r\n              var deferred = $q.defer(),\r\n                 key;\r\n              \r\n              try {\r\n                 for (key in POLY_FILL.storage) {\r\n                    // exclude function properties as keys for data removal\r\n                    if (POLY_FILL.storage.hasOwnProperty(key)) {\r\n                        delete POLY_FILL.storage[key];\r\n                    }\r\n                 }\r\n                 \r\n                 console.log('POLY_FILL ' + POLY_FILL.dbName + ' data cleared');\r\n                 $timeout(function() {\r\n                    deferred.resolve();\r\n                 });\r\n              } catch (e) {\r\n                $timeout(function() {\r\n                   deferred.reject();\r\n                });\r\n              }\r\n              \r\n              return deferred.promise;\r\n            };\r\n         \r\n        /**\r\n          * Utiltiy function for verifying whether client storage ($window.localStorage | $window.sessionStorage) space is filled to\r\n          * capacity\r\n          *\r\n          * @param {e} error thrown\r\n          */\r\n        var storeQuotaExceeded = function(e) {\r\n           var quotaExceeded = false;\r\n           if (e) {\r\n               if (e.code) {\r\n                 switch (e.code) {\r\n                   case 22:\r\n                     quotaExceeded = true;\r\n                     break;\r\n                   case 1014:\r\n                     // Firefox\r\n                     if (e.name === 'NS_ERROR_DOM_QUOTA_REACHED') {\r\n                       quotaExceeded = true;\r\n                     }\r\n                     break;\r\n                 }\r\n               } else if (e.number === -2147024882) {\r\n                 // Internet Explorer 8\r\n                 quotaExceeded = true;\r\n               }\r\n           }\r\n           return quotaExceeded;\r\n        };\r\n        \r\n        /**\r\n         * Handles save request for localStorage and sessionStorage\r\n         * @param {storeType} the storage type {localStorage | localSessionStorage}\r\n         * @param {key} the key for caching data\r\n         * @param {value} the data to cache\r\n         */\r\n        var saveHandle = function(storeType, key, value) {\r\n           var clearCache;\r\n           try {\r\n              storeType.db.setItem(key, value);\r\n           } catch (e1) {\r\n              if (storeType.storeQuotaExceeded(e1)) {\r\n                 /* delete first n-cached items as specified by value of deletableCacheItems */\r\n                 var deletedCacheCount = 0;\r\n                 for (var storeKey in storeType.db) {\r\n                    if (storeType.db.getItem(storeKey)) {\r\n                      if (deletedCacheCount === storeType.options.deletableCacheItems) {\r\n                         break;\r\n                      }\r\n                      // clear timer if previously set\r\n                      if (clearCache) {\r\n                         $timeout.cancel(clearCache);\r\n                      }\r\n                      // delete cache data\r\n                      storeType.removeItem(storeKey).then(incrementDeletedCache);\r\n                    }\r\n                 }\r\n                 \r\n                 var incrementDeletedCache = function(){\r\n                    deletedCacheCount++;\r\n                 };                   \r\n              }\r\n              try {\r\n                 // perform a second attempt to cache current page\r\n                 storeType.db.setItem(key, value);\r\n              } catch (e2) {\r\n                 /*\r\n                   * looks like data might be too big or something weird happened....ignore caching of current page\r\n                   */\r\n                 console.error(\"error persisting data: \" + e2);\r\n                 return false;\r\n              }\r\n           }\r\n           \r\n           // invalidate current cached page after specified max period\r\n           clearCache = $timeout(function() {\r\n              storeType.removeItem(key);\r\n           }, storeType.options.maxAge);\r\n           \r\n           return true;\r\n        };\r\n        \r\n        /**\r\n         * This storage object help abstract the basic functionalities of localStorage.\r\n         */\r\n        var localStorageDB = {};\r\n           // marker for localStorage\r\n           localStorageDB.name = \"localStorage\";\r\n           // database name\r\n           localStorageDB.dbName = \"cacheDB\";\r\n           // entity name\r\n           localStorageDB.entityName = \"cacheTable\";\r\n           // db handle\r\n           localStorageDB.db = $window.localStorage;\r\n           // storage capacity check\r\n           localStorageDB.storeQuotaExceeded = storeQuotaExceeded;\r\n           // database options\r\n           localStorageDB.options = {};\r\n           \r\n           // return reference to localStorageDB.db\r\n           localStorageDB.open = function() {\r\n              var deferred = $q.defer();\r\n              // update dbName and entityName on DB open\r\n              localStorageDB.dbName = localStorageDB.options.dbName;\r\n              localStorageDB.entityName = localStorageDB.options.entityName;\r\n              $timeout(function() {\r\n                 deferred.resolve(localStorageDB.db);\r\n              });\r\n              return deferred.promise;\r\n           };\r\n           /** \r\n            * Function for caching a data. \r\n            * key must be truthy -> not (null | undefined | NaN | \"\" | 0 | false)\r\n            * @param {key} the key for data to be cached\r\n            * @param {value} the actual data to cache\r\n            */\r\n           localStorageDB.save = localStorageDB.setItem = function(key, value) {\r\n              var deferred = $q.defer();\r\n              \r\n              if (key) {\r\n                 var savedStatus = saveHandle(localStorageDB, key, value);\r\n                 deferred.resolve(savedStatus);\r\n              } else {\r\n                 deferred.reject();\r\n              }\r\n              \r\n              return deferred.promise;\r\n            };\r\n            /** \r\n             * Function to retrieve existing cache data\r\n             * key must be defined\r\n             * @param {key} the key for data to be retrieved\r\n             */\r\n            localStorageDB.get = localStorageDB.getItem = function(key) {\r\n              var deferred = $q.defer();\r\n              \r\n              data = localStorageDB.db.getItem(key);\r\n              deferred.resolve(data);\r\n              \r\n              return deferred.promise;\r\n            };\r\n            /** \r\n             * Function to delete an existing cache data\r\n             * key must be defined and part of exisiting keys\r\n             * @param {key} the key for data to be deleted\r\n             */\r\n            localStorageDB.remove = localStorageDB.removeItem = function(key) {\r\n              var deferred = $q.defer();\r\n              \r\n              localStorageDB.db.removeItem(key);\r\n              deferred.resolve();\r\n              \r\n              return deferred.promise;\r\n            };\r\n            /** \r\n             * Function to compute current size of cache, as per number of cache items\r\n             */\r\n            localStorageDB.length = function() {\r\n              var deferred = $q.defer(),\r\n                  size = 0;\r\n                    \r\n                size = localStorageDB.db.length;\r\n                deferred.resolve(size);\r\n                \r\n                return deferred.promise;\r\n            };\r\n            /** \r\n             * Function to clear entire cache space\r\n             */\r\n            localStorageDB.clear = function() {\r\n              var deferred = $q.defer();\r\n              \r\n              localStorageDB.db.clear();\r\n              deferred.resolve();\r\n              console.log(\"localStorageDB data cleared\");\r\n              \r\n              return deferred.promise;\r\n            };\r\n            \r\n        /**\r\n         * This storage object help abstract the basic functionalities of sessionStorage.\r\n         */\r\n        var localSessionStorage = {};\r\n           // marker for localStorage\r\n           localSessionStorage.name = \"sessionStorage\";\r\n           // database name\r\n           localSessionStorage.dbName = \"cacheDB\";\r\n           // entity name\r\n           localSessionStorage.entityName = \"cacheTable\";\r\n           // db handle\r\n           localSessionStorage.db = $window.sessionStorage;\r\n           // storage capacity check\r\n           localSessionStorage.storeQuotaExceeded = storeQuotaExceeded;\r\n           // database options\r\n           localSessionStorage.options = {};\r\n           \r\n           // return reference to localSessionStorage.db\r\n           localSessionStorage.open = function() {\r\n              var deferred = $q.defer();\r\n              // update dbName and entityName on DB open\r\n              localSessionStorage.dbName = localSessionStorage.options.dbName;\r\n              localSessionStorage.entityName = localSessionStorage.options.entityName;\r\n              $timeout(function() {\r\n                 deferred.resolve(localSessionStorage.db);\r\n              });\r\n              return deferred.promise;\r\n           };\r\n           /** \r\n            * Function for caching a data. \r\n            * key must be truthy -> not (null | undefined | NaN | \"\" | 0 | false)\r\n            * @param {key} the key for data to be cached\r\n            * @param {value} the actual data to cache\r\n            */\r\n           localSessionStorage.save = localSessionStorage.setItem = function(key, value) {\r\n              var deferred = $q.defer();\r\n              \r\n              if (key) {\r\n                 var savedStatus = saveHandle(localSessionStorage, key, value);\r\n                 deferred.resolve(savedStatus);\r\n              } else {\r\n                 deferred.reject();\r\n              }\r\n              \r\n              return deferred.promise;\r\n           };\r\n           /** \r\n            * Function to retrieve existing cache data\r\n            * key must be defined\r\n            * @param {key} the key for data to be retrieved\r\n            */\r\n           localSessionStorage.get = localSessionStorage.getItem = function(key) {\r\n              var deferred = $q.defer();\r\n              \r\n              data = localSessionStorage.db.getItem(key);\r\n              deferred.resolve(data);\r\n              \r\n              return deferred.promise;\r\n           };\r\n           /** \r\n            * Function to delete an existing cache data\r\n            * key must be defined and part of exisiting keys\r\n            * @param {key} the key for data to be deleted\r\n            */\r\n           localSessionStorage.remove = localSessionStorage.removeItem = function(key) {\r\n              var deferred = $q.defer();\r\n              \r\n              localSessionStorage.db.removeItem(key);\r\n              deferred.resolve();\r\n              console.log(\"localSessionStorage data cleared\");\r\n              \r\n              return deferred.promise;\r\n           };\r\n           /** \r\n            * Function to compute current size of cache, as per number of cache items\r\n            */\r\n           localSessionStorage.length = function() {\r\n              var deferred = $q.defer(),\r\n                  size = 0;\r\n                    \r\n              size = localSessionStorage.db.length;\r\n              deferred.resolve(size);\r\n                \r\n              return deferred.promise;\r\n           };\r\n           /** \r\n            * Function to clear entire cache space\r\n            */\r\n           localSessionStorage.clear = function() {\r\n              var deferred = $q.defer();\r\n              \r\n              localSessionStorage.db.clear();\r\n              deferred.resolve();\r\n                \r\n              return deferred.promise;\r\n           };\r\n\r\n           /**\r\n            * This storage object help abstract the basic functionalities of IndexDB.\r\n            */\r\n           var localIndexedDB = {};\r\n           // database version\r\n           localIndexedDB.version = 1;\r\n           // marker for localIndexedDB\r\n           localIndexedDB.name = \"indexedDB\";\r\n           // database name\r\n           localIndexedDB.dbName = \"cacheDB\";\r\n           // entity name\r\n           localIndexedDB.entityName = \"cacheTable\";\r\n           // database options\r\n           localIndexedDB.options = {};\r\n\r\n           // open the database and configure it appropraitely\r\n           localIndexedDB.open = function() {\r\n              var deferred = $q.defer();\r\n              // update dbName and entityName on DB open\r\n              localIndexedDB.dbName = localIndexedDB.options.dbName;\r\n              localIndexedDB.entityName = localIndexedDB.options.entityName;\r\n              \r\n              if (localIndexedDB.db) {\r\n                 $timeout(function() {\r\n                    deferred.resolve(localIndexedDB.db);\r\n                 });\r\n                 \r\n                 return deferred.promise;\r\n              }\r\n              \r\n              if (!($window.indexedDB = $window.IndexedDB || $window.mozIndexedDB || $window.webkitIndexedDB || $window.msIndexedDB)) {\r\n                 var errorMessage = \"indexedDB not supported on this device\";\r\n                 console.warn(errorMessage);\r\n                 $timeout(function() {\r\n                   deferred.resolve(null);\r\n                 });\r\n                 return deferred.promise;\r\n               }\r\n              // use appropriate browser prefix\r\n              if ('webkitIndexedDB' in $window) {\r\n                 $window.IDBTransaction = $window.IDBTransaction || $window.webkitIDBTransaction || $window.msIDBTransaction;\r\n                 $window.IDBKeyRange = $window.IDBKeyRange || $window.webkitIDBKeyRange || $window.msIDBKeyRange;\r\n              }\r\n              \r\n              var request = $window.indexedDB.open(localIndexedDB.dbName, localIndexedDB.version);\r\n\r\n              /* this is called once for when creating/upgrading localIndexedDB.db we can only create Object stores in a version-change transaction. */\r\n              request.onupgradeneeded = function(e) {\r\n                 var db = e.target.result;\r\n                 // handle for the actual indexedDB database\r\n                 localIndexedDB.db = db;\r\n\r\n                 e.target.transaction.onerror = $window.indexedDB.onerror;\r\n\r\n                 if (db.objectStoreNames.contains(localIndexedDB.entityName)) {\r\n                    db.deleteObjectStore(localIndexedDB.entityName);\r\n                 }\r\n\r\n                 db.createObjectStore(localIndexedDB.entityName);\r\n                 console.log(localIndexedDB.dbName + \" indexedDB database created with store: \" + localIndexedDB.entityName);\r\n              };\r\n\r\n              /* invoked when after localIndexedDB.db has opened and all version-changes completed */\r\n              request.onsuccess = function(e) {\r\n                 localIndexedDB.db = e.target.result;\r\n                 $timeout(function() {\r\n                    deferred.resolve(localIndexedDB.db);\r\n                 });\r\n              };\r\n\r\n              request.onerror = function(e) {\r\n                  var errorMessage = \"device might be operating incognito. localIndexedDB couldn't be created/opened. error: \" + e.message;\r\n                  console.warn(errorMessage);\r\n                 \r\n                  $timeout(function() {\r\n                     deferred.resolve(null);\r\n                 });\r\n              };\r\n\r\n              return deferred.promise;\r\n           };\r\n           /** \r\n            * Function for caching a data. \r\n            * key must be truthy -> not (null | undefined | NaN | \"\" | 0 | false)\r\n            * @param {key} the key for data to be cached\r\n            * @param {value} the actual data to cache\r\n            */\r\n           localIndexedDB.save = localIndexedDB.setItem = function(key, value) {\r\n              var deferred = $q.defer();\r\n              if (!key) {\r\n                 deferred.reject(\"invalid key\");\r\n                 return deferred.promise;\r\n              }\r\n\r\n              var db = localIndexedDB.db;\r\n              if (!db) {\r\n                  var errorMessage = \"localIndexedDB is not available\";\r\n                  console.warn(errorMessage);\r\n                  $timeout(function() {\r\n                    deferred.reject(errorMessage);\r\n                 });\r\n                 return deferred.promise;\r\n              }\r\n\r\n              // use entity object store in read-write manner\r\n              var trans = db.transaction([localIndexedDB.entityName], \"readwrite\");\r\n              var objectStore = trans.objectStore(localIndexedDB.entityName);\r\n              var request = objectStore.put(value, key);\r\n              var savedStatus = false;\r\n              \r\n              request.onsuccess = function(e) {\r\n                 if (e.target.result) {\r\n                    savedStatus = true;\r\n                    // invalidate current cached page after specified max period\r\n                    $timeout(function() {\r\n                       localIndexedDB.removeItem(key);\r\n                    }, localIndexedDB.options.maxAge);\r\n                 }\r\n                 \r\n                 $timeout(function() {\r\n                    deferred.resolve(savedStatus);\r\n                 });\r\n              };\r\n\r\n              request.onerror = function(e) {\r\n                  var errorMessage = value + \" couldn't be saved. error: \" + e.message;\r\n                  console.warn(errorMessage);\r\n                  \r\n                  var storageRequestSuccess = function(used, remaining) {\r\n                    console.log(\"used quota: \" + used + \", remaining quota: \" + remaining);\r\n                  };\r\n                  var storageRequestFailure = function(e) {\r\n                    console.log('error requesting storage space: ' + e.message); \r\n                  };\r\n                  \r\n                  // check if error is due to quota limit\r\n                  if ($window.navigator.webkitTemporaryStorage) {\r\n                    $window.navigator.queryUsageAndQuota(storageRequestSuccess, storageRequestFailure);\r\n                  } else {\r\n                     $window.webkitStorageInfo.queryUsageAndQuota($window.webkitStorageInfo.TEMPORARY, storageRequestSuccess, storageRequestFailure);\r\n                  }\r\n                  \r\n                  $timeout(function() {\r\n                     deferred.resolve(savedStatus);\r\n                  });\r\n              };\r\n\r\n              return deferred.promise;\r\n           };\r\n           /** \r\n            * Function to retrieve existing cache data\r\n            * key must be defined\r\n            * @param {key} the key for data to be retrieved\r\n            */\r\n           localIndexedDB.get = localIndexedDB.getItem = function(key) {\r\n              var deferred = $q.defer();\r\n              var db = localIndexedDB.db;\r\n              if (!db) {\r\n                  var errorMessage = \"localIndexedDB is not available\";\r\n                  console.warn(errorMessage);\r\n                  $timeout(function() {\r\n                    deferred.reject(errorMessage);\r\n                 });\r\n                 return deferred.promise;\r\n              }\r\n\r\n              // use entity object store in read-write manner\r\n              var trans = db.transaction([localIndexedDB.entityName], \"readonly\");\r\n              var objectStore = trans.objectStore(localIndexedDB.entityName);\r\n\r\n              var request = objectStore.get(key);\r\n              var data = null;\r\n\r\n              request.onsuccess = function(e) {\r\n                 if (e.target.result) {\r\n                    data = e.target.result;\r\n                 }\r\n                 \r\n                 $timeout(function() {\r\n                    deferred.resolve(data);\r\n                 });\r\n              };\r\n\r\n              request.onerror = function(e) {\r\n                  var errorMessage =  \"couldn't retrieved value for key: \" + key + \". error: \" + e.message;\r\n                  console.warn(errorMessage);\r\n                 \r\n                  $timeout(function() {\r\n                     deferred.resolve(data);\r\n                  });\r\n              };\r\n\r\n              return deferred.promise;\r\n           };\r\n           /** \r\n            * Function to delete an existing cache data\r\n            * key must be defined and part of exisiting keys\r\n            * @param {key} the key for data to be deleted\r\n            */\r\n           localIndexedDB.remove = localIndexedDB.removeItem = function(key) {\r\n              var deferred = $q.defer();\r\n              var db = localIndexedDB.db;\r\n              if (!db) {\r\n                  var errorMessage = \"localIndexedDB is not available\";\r\n                  console.warn(errorMessage);\r\n                  \r\n                  $timeout(function() {\r\n                    deferred.reject(errorMessage);\r\n                 });\r\n                 \r\n                 return deferred.promise;\r\n              }\r\n\r\n              // use entity object store in read-write manner\r\n              var trans = db.transaction([localIndexedDB.entityName], \"readwrite\");\r\n              var objectStore = trans.objectStore(localIndexedDB.entityName);\r\n\r\n              // yui compressor is not happy with objectStore.delete.key\r\n              var request = objectStore[\"delete\"](key);\r\n\r\n              request.onsuccess = function() {\r\n                  $timeout(function() {\r\n                    deferred.resolve();\r\n                 });\r\n              };\r\n\r\n              request.onerror = function(e) {\r\n                  var errorMessage = \"couldn't remove value for key: \" + key + \". error: \" + e.message;\r\n                 console.warn(errorMessage);\r\n                 \r\n                 $timeout(function() {\r\n                    deferred.reject(errorMessage);\r\n                 });\r\n              };\r\n\r\n              return deferred.promise;\r\n           };\r\n           /** \r\n            * Function to clear entire cache space\r\n            */\r\n           localIndexedDB.clear = function() {\r\n              var deferred = $q.defer();\r\n              var db = localIndexedDB.db;\r\n              if (!db) {\r\n                  var errorMessage = \"localIndexedDB is not available\";\r\n                  console.warn(errorMessage);\r\n\r\n                  $timeout(function() {\r\n                    deferred.reject(errorMessage);\r\n                 });\r\n                 \r\n                 return deferred.promise;\r\n              }\r\n\r\n              // use entity object store in read-write manner\r\n              var trans = db.transaction([localIndexedDB.entityName], \"readwrite\");\r\n              var objectStore = trans.objectStore(localIndexedDB.entityName);\r\n              var request = objectStore.clear();\r\n\r\n              request.onsuccess = function () {\r\n                  console.log(localIndexedDB.dbName + \" indexedDB data cleared\");\r\n\r\n                  $timeout(function() {\r\n                    deferred.resolve();\r\n                 });\r\n              };\r\n\r\n              request.onerror = function(e) {\r\n                  var errorMessage = \"couldn't clear content of indexedDB: \" + localIndexedDB.dbName + \". error: \" + e.message;\r\n                  console.warn(errorMessage);\r\n                  \r\n                  $timeout(function() {\r\n                    deferred.reject(errorMessage);\r\n                 });\r\n              };\r\n\r\n              request.onblocked = function (e) {\r\n                  var errorMessage = \"couldn't clear content of indexedDB: \" + localIndexedDB.dbName + \" due to operation being blocked. error: \" + e.message;\r\n                  console.warn(errorMessage);\r\n                  \r\n                  $timeout(function() {\r\n                    deferred.reject(errorMessage);\r\n                 });\r\n              };\r\n\r\n              return deferred.promise;\r\n           };\r\n           /** \r\n            * Function to compute current size of cache, as per number of cache items\r\n            */\r\n           localIndexedDB.length = function() {\r\n              var deferred = $q.defer();\r\n              var db = localIndexedDB.db;\r\n              if (!db) {\r\n                  var errorMessage = \"localIndexedDB is not available\";\r\n                  console.warn(errorMessage);\r\n                  \r\n                  $timeout(function() {\r\n                    deferred.reject(errorMessage);\r\n                 });\r\n              }\r\n\r\n              // use entity object store in read-write manner\r\n              var trans = db.transaction([localIndexedDB.entityName], \"readwrite\");\r\n              var objectStore = trans.objectStore(localIndexedDB.entityName);\r\n              var request = objectStore.count();\r\n\r\n              request.onsuccess = function () {\r\n                  $timeout(function() {\r\n                    deferred.resolve(request.result);\r\n                 });\r\n              };\r\n\r\n              request.onerror = function(e) {\r\n                  var errorMessage = \"couldn't clear compute size of indexedDB: \" + localIndexedDB.dbName + \". error: \" + e.message;\r\n                  console.warn(errorMessage);\r\n                  \r\n                  $timeout(function() {\r\n                    deferred.reject(errorMessage);\r\n                 });\r\n              };\r\n\r\n              return deferred.promise;\r\n           };\r\n\r\n         /**\r\n         * This storage object help abstract the basic functionalities of WebSQL.\r\n         */\r\n        var localWebSQL = {};\r\n           // database version\r\n           localWebSQL.version = \"1.0\";\r\n           // marker for localIndexedDB\r\n           localWebSQL.name = \"webSQL\";\r\n           // database name\r\n           localWebSQL.dbName = \"cacheDB\";\r\n           // entity name\r\n           localWebSQL.entityName = \"cacheTable\";\r\n           // database description\r\n           localWebSQL.dbDescription = localWebSQL.dbName;\r\n           // database size\r\n           localWebSQL.dbSize = 5 * 1024 * 1024;\r\n           // entity size\r\n           localWebSQL.entitySize = 0;\r\n           // database options\r\n           localWebSQL.options = {};\r\n\r\n           // open the database and configure it appropraitely\r\n           localWebSQL.open = function() {\r\n              var deferred = $q.defer();\r\n              // update dbName and entityName on DB open\r\n              localWebSQL.dbName = localWebSQL.options.dbName;\r\n              localWebSQL.entityName = localWebSQL.options.entityName;\r\n              \r\n              try {\r\n                  if (localWebSQL.db) {\r\n                    $timeout(function() {\r\n                          deferred.resolve();\r\n                     });\r\n                      return deferred.promise;\r\n                  }\r\n\r\n                  // check for webSQL support\r\n                  if (!$window.openDatabase) {\r\n                    var errorMessage = \"webSQL not supported on this device\";\r\n                    console.warn(errorMessage);\r\n                    $timeout(function() {\r\n                      deferred.resolve(null);\r\n                    });\r\n                    return deferred.promise;\r\n                  }\r\n                  \r\n                  // handle for the actual webSQL database\r\n                 localWebSQL.db = $window.openDatabase(localWebSQL.dbName, localWebSQL.version, localWebSQL.dbDescription, localWebSQL.dbSize);\r\n\r\n                 localWebSQL.db.transaction(function (tx) {\r\n                    var createTable = 'CREATE TABLE IF NOT EXISTS ' + localWebSQL.entityName + ' (cacheKey TEXT PRIMARY KEY, cacheValue TEXT)';\r\n                    tx.executeSql(createTable, [], onsuccess, onfailure);\r\n                 });\r\n\r\n                 var onsuccess = function() {\r\n                    $timeout(function() {\r\n                       deferred.resolve(localWebSQL.db);\r\n                    });\r\n                 };\r\n\r\n                 var onfailure = function(tx, e) {\r\n                     var errorMessage = \"\";\r\n                     switch (e.code) \r\n                     {\r\n                        case e.SYNTAX_ERR:\r\n                          errorMessage = \"syntax error has occurred. \" + e.message;\r\n                          console.warn(errorMessage);\r\n                            break;\r\n                        default:\r\n                          errorMessage = \"error creating webSQL table \" + localWebSQL.entityName + \". error: \" + e;\r\n                     }\r\n                     console.warn(errorMessage);\r\n                     \r\n                     $timeout(function() {\r\n                        deferred.resolve(null);\r\n                    });\r\n                 };\r\n              } catch (e) {\r\n                  var errorMessage = \"error creating webSQL database/table. error: \" + e;\r\n                  console.warn(errorMessage);\r\n                  \r\n                  $timeout(function() {\r\n                     deferred.resolve(null);\r\n                 });\r\n              }\r\n\r\n              return deferred.promise;\r\n           };\r\n           /** \r\n            * Function for caching a data. \r\n            * key must be truthy -> not (null | undefined | NaN | \"\" | 0 | false)\r\n            * @param {key} the key for data to be cached\r\n            * @param {value} the actual data to cache\r\n            */\r\n           localWebSQL.save = localWebSQL.setItem = function(key, value) {\r\n              var deferred = $q.defer();\r\n              var errorMessage = \"\";\r\n              if (!key) {\r\n                  errorMessage = \"invalid key\";\r\n                  console.warn(errorMessage);\r\n                  \r\n                 $timeout(function() {\r\n                    deferred.reject(errorMessage);\r\n                 });\r\n              }\r\n\r\n              if (!localWebSQL.db) {\r\n                  errorMessage = \"localWebSQL.db undefined\";\r\n                  console.warn(errorMessage);\r\n                   \r\n                  $timeout(function() {\r\n                     deferred.reject(errorMessage);\r\n                  });\r\n                 \r\n                  return deferred.promise;\r\n              }\r\n\r\n              var db = localWebSQL.db;\r\n              var savedStatus = false;\r\n              db.transaction(function (tx) {\r\n                  var insertData = 'INSERT INTO ' + localWebSQL.entityName + ' (cacheKey, cacheValue) VALUES (?, ?)';\r\n                 tx.executeSql(insertData, [key, value], oninsertsuccess, onfailure);\r\n              });\r\n\r\n              var oninsertsuccess = function() {\r\n                 savedStatus = true;\r\n                 // invalidate current cached page after specified max period\r\n                 $timeout(function() {\r\n                    localWebSQL.removeItem(key);\r\n                 }, localWebSQL.options.maxAge);\r\n                 \r\n                  $timeout(function() {\r\n                    deferred.resolve(savedStatus);\r\n                 });\r\n              };\r\n              \r\n              var onfailure = function(tx, e) {\r\n                 var errorMessage = \"\";\r\n                 switch (e.code) \r\n                 {\r\n                    case e.SYNTAX_ERR:\r\n                       errorMessage = \"syntax error has occurred. \" + e.message;\r\n                       console.warn(errorMessage);\r\n                        break;\r\n                    default:\r\n                       errorMessage = \"error caching data. error: \" + e.message;\r\n                 }\r\n                 console.warn(errorMessage);\r\n                  \r\n                 $timeout(function() {\r\n                    deferred.reject(errorMessage);\r\n                 });\r\n              };\r\n\r\n              return deferred.promise;\r\n           };\r\n           /** \r\n            * Function to retrieve existing cache data\r\n            * key must be defined\r\n            * @param {key} the key for data to be retrieved\r\n            */\r\n           localWebSQL.get = localWebSQL.getItem = function(key) {\r\n              var deferred = $q.defer();\r\n              var errorMessage = \"\";\r\n              if (!localWebSQL.db) {\r\n                 errorMessage = \"localWebSQL.db undefined\";\r\n                 console.warn(errorMessage);\r\n                   \r\n                 $timeout(function() {\r\n                    deferred.reject(errorMessage);\r\n                 });\r\n                 \r\n                 return deferred.promise;\r\n              }\r\n\r\n              var db = localWebSQL.db;\r\n              db.transaction(function (tx) {\r\n                 var selectData = 'SELECT cacheValue FROM ' + localWebSQL.entityName + ' WHERE cacheKey = ?';\r\n                 tx.executeSql(selectData, [key], onsuccess, onfailure);\r\n              });\r\n              var onsuccess = function(tx, result) {\r\n                 if (result) {\r\n                     var data = null;\r\n                    if (result.rows && result.rows.length) {\r\n                        data = result.rows.item(0).cacheValue;\r\n                    }\r\n                    \r\n                    $timeout(function() {\r\n                       deferred.resolve(data);\r\n                    });\r\n                 }\r\n              };\r\n              \r\n              var onfailure = function(tx, e) {\r\n                  var errorMessage = \"\";\r\n                  switch (e.code) \r\n                  {\r\n                     case e.SYNTAX_ERR:\r\n                       errorMessage = \"syntax error has occurred. \" + e.message;\r\n                       console.warn(errorMessage);\r\n                         break;\r\n                     default:\r\n                       errorMessage = \"error retrieving data. error: \" + e.message;\r\n                  }\r\n                  console.warn(errorMessage);\r\n                  \r\n                  $timeout(function() {\r\n                    deferred.reject(errorMessage);\r\n                 });\r\n              };\r\n              \r\n              return deferred.promise;\r\n           };\r\n           /** \r\n            * Function to delete an existing cache data\r\n            * key must be defined and part of exisiting keys\r\n            * @param {key} the key for data to be deleted\r\n            */\r\n           localWebSQL.remove = localWebSQL.removeItem = function(key) {\r\n               var deferred = $q.defer();\r\n               var errorMessage = \"\";\r\n               if (!localWebSQL.db) {\r\n                   errorMessage = \"localWebSQL.db undefined\";\r\n                   console.warn(errorMessage);\r\n                   \r\n                   $timeout(function() {\r\n                      deferred.reject(errorMessage);\r\n                   });\r\n                   $timeout.flush();\r\n                 \r\n                  return deferred.promise;\r\n              }\r\n\r\n              var db = localWebSQL.db;\r\n              db.transaction(function (tx) {\r\n                 var deleteData = 'DELETE FROM ' + localWebSQL.entityName + ' WHERE cacheKey = ?';\r\n                 tx.executeSql(deleteData, [key], onsuccess, onfailure);\r\n              });\r\n\r\n              var onsuccess = function() {\r\n                 $timeout(function() {\r\n                    deferred.resolve();\r\n                 });\r\n              };\r\n              \r\n              var onfailure = function(tx, e) {\r\n                  var errorMessage = \"\";\r\n                  switch (e.code) \r\n                  {\r\n                     case e.SYNTAX_ERR:\r\n                       errorMessage = \"syntax error has occurred. \" + e.message;\r\n                       console.warn(errorMessage);\r\n                         break;\r\n                     default:\r\n                       errorMessage = \"error removing data. error: \" + e.message;\r\n                  }\r\n                  console.warn(errorMessage);\r\n                  \r\n                  $timeout(function() {\r\n                     deferred.reject(errorMessage);\r\n                  });\r\n              };\r\n\r\n              return deferred.promise;\r\n           };\r\n           /** \r\n            * Function to clear entire cache space\r\n            */\r\n           localWebSQL.clear = function() {\r\n              var deferred = $q.defer();\r\n              var errorMessage = \"\";\r\n              if (!localWebSQL.db) {\r\n                  errorMessage = \"localWebSQL.db yet to be defined\";\r\n                  console.warn(errorMessage);\r\n                   \r\n                  $timeout(function() {\r\n                     deferred.reject(errorMessage);\r\n                  });\r\n                 \r\n                  return deferred.promise;\r\n              }\r\n\r\n              var db = localWebSQL.db;\r\n              var status = false;\r\n              db.transaction(function (tx) {\r\n                  var deleteTable = \"DELETE FROM \" + localWebSQL.entityName;\r\n                  tx.executeSql(deleteTable, [], onsuccess, onfailure);\r\n              });\r\n\r\n              var onsuccess = function() {\r\n                  console.log(localWebSQL.entityName + \" table in \" + localWebSQL.dbName + \" webSQL data cleared\");\r\n                  status = true;\r\n                  \r\n                  $timeout(function() {\r\n                     deferred.resolve(status);\r\n                  });\r\n              };\r\n              \r\n              var onfailure = function(tx, e) {\r\n                  var errorMessage = \"\";\r\n                  switch (e.code) \r\n                  {\r\n                     case e.SYNTAX_ERR:\r\n                       errorMessage = \"syntax error has occurred. \" + e.message;\r\n                       console.warn(errorMessage);\r\n                         break;\r\n                     default:\r\n                       errorMessage = \"couldn't clear content of webSQL: \" + localWebSQL.entityName  + \". error: \" + e.message;\r\n                  }\r\n                  console.warn(errorMessage);\r\n                  \r\n                  $timeout(function() {\r\n                     deferred.reject(errorMessage);\r\n                  });\r\n              };\r\n\r\n              return deferred.promise;\r\n           };\r\n           /** \r\n            * Function to compute current size of cache, as per number of cache items\r\n            */\r\n           localWebSQL.length = function() {\r\n              var deferred = $q.defer();\r\n              var errorMessage = \"\";\r\n              if (!localWebSQL.db) {\r\n                  errorMessage = \"localWebSQL.db undefined\";\r\n                  console.warn(errorMessage);\r\n                   \r\n                  $timeout(function() {\r\n                      deferred.reject(errorMessage);\r\n                  });\r\n              }\r\n\r\n              var db = localWebSQL.db;\r\n              \r\n              db.transaction(function (tx) {\r\n                  var tableSize = 'SELECT COUNT(*) AS Size from ' + localWebSQL.entityName;\r\n                 tx.executeSql(tableSize, [], onsuccess, onfailure);\r\n              });\r\n\r\n              var onsuccess = function(tx, result) {\r\n                 if (result && result.rows) {\r\n                    $timeout(function() {\r\n                       deferred.resolve(result.rows.item(0).Size);\r\n                    });\r\n                 }\r\n              };\r\n              \r\n              var onfailure = function(tx, e) {\r\n                 var errorMessage = \"\";\r\n                 switch (e.code) \r\n                 {\r\n                    case e.SYNTAX_ERR:\r\n                       errorMessage = \"syntax error has occurred. \" + e.message;\r\n                       console.warn(errorMessage);\r\n                         break;\r\n                    default:\r\n                       errorMessage = \"error computing current cache size. error: \" + e.message;\r\n                 }\r\n                 console.warn(errorMessage);\r\n\r\n                 $timeout(function() {\r\n                    deferred.reject(errorMessage);\r\n                 });\r\n              };\r\n\r\n              return deferred.promise;\r\n           };\r\n\r\n        /**\r\n          * Utility function for detecting if specified storage type exist\r\n          *\r\n          * @param {storageType} the type of storage to consider\r\n          */\r\n        var storageExist = function(storageType) {\r\n           var uid = (new Date()).valueOf().toString();\r\n           // check if specified storageType allow storage\r\n           var savePromise = storageType.save(uid, uid);\r\n           savePromise.then(function() {\r\n              // delete test data upon successful cache test\r\n              storageType.remove(uid);\r\n           });\r\n           return savePromise;\r\n        };\r\n\r\n        /**\r\n          * Act as the storage handle based on available storage type. This help predetermine possible storage typeon service load. \r\n          * It use either { localStorage | sessionStorage | polyFill } in the specified order of\r\n          * availability. Store can also be configured using the cacheType {LOCAL_STORAGE | SESSION_STORAGE | INDEXED_DB | WEB_SQL | POLY_FILL };\r\n          */\r\n        var store = (function() {\r\n           try {\r\n              storageExist(localStorageDB).then(function(lsdbSavedStatus) {\r\n                 if (lsdbSavedStatus) {\r\n                    // use localStorage directly if available\r\n                    return localStorageDB;\r\n                 } else {\r\n                    storageExist(localSessionStorage).then(function(lssdbSavedStatus) {\r\n                       if (lssdbSavedStatus) {\r\n                          // use sessionStorage directly if available\r\n                          console.log(\"attempting sessionStorage client caching\");\r\n                          return localSessionStorage;\r\n                       } else {\r\n                          // fall back to poly fill data map\r\n                          console.log(\"attempting POLY_FILL client caching\");\r\n                          return POLY_FILL;\r\n                       }\r\n                    });\r\n                 }\r\n              });\r\n           } catch (e) {\r\n              console.error(e.description);\r\n              /* most likely: localStorage and sessionStorage have been disabled by user */\r\n              console.warn(\"....defaulting to POLY_FILL client caching\");\r\n              return POLY_FILL;\r\n           }\r\n        }());\r\n\r\n        // supported cache types\r\n        var cacheType = {LOCAL_STORAGE: 'localStorage', SESSION_STORAGE: 'sessionStorage', INDEXED_DB: 'indexedDB', \"WEB_SQL\": \"webSQL\", POLY_FILL: \"polyFill\"};\r\n\r\n        // configurable options\r\n        var options = {\r\n            /*\r\n             * default database name. applicable to INDEXED_DB | WEB_SQL\r\n             */\r\n            dbName: \"cacheDB\",\r\n            /*\r\n             * default table name. applicable to INDEXED_DB | WEB_SQL\r\n             */\r\n            entityName: \"cacheTable\",\r\n            /*\r\n             * first n-items (default to first 10 items) to be deleted from the cache. this should be used when client storage is full. applicable to\r\n             * LOCAL_STORAGE | SESSION_STORAGE\r\n             */\r\n            deletableCacheItems: 10,\r\n            /*\r\n             * period (in milliseconds) after which each cached data should be deleted. default to 10 min\r\n             */\r\n            maxAge: 600000,\r\n            /*\r\n             * cache type to use: valid options are { localStorage | sessionStorage | indexedDB | webSQL | polyFill }. default to polyFill\r\n             */\r\n            storage: cacheType.POLY_FILL\r\n        };\r\n\r\n        return {\r\n           // supported cache mechanism\r\n           cacheType: cacheType,\r\n           // storage handle\r\n           getStorage: function(){\r\n              return store;\r\n           },\r\n           // storage availability\r\n           storeQuotaExceeded: storeQuotaExceeded,\r\n           // check storage availability and usability\r\n           storageExist: storageExist,\r\n           // configurable options\r\n           options: options,\r\n           // cache service initialization\r\n           init: function(initData) {\r\n              var deferred = $q.defer();\r\n              /* ensure dbName option exist and that it is a valid truthy */\r\n              if (initData && initData.hasOwnProperty('dbName') && initData.dbName) {\r\n                   options.dbName = initData.dbName;\r\n              }\r\n              /* ensure entityName option exist and that it is a valid truthy */\r\n              if (initData && initData.hasOwnProperty('entityName') && initData.entityName) {\r\n                   options.entityName = initData.entityName;\r\n              }\r\n              /* ensure deletableCacheItems option exist and that it is a valid truthy */\r\n              if (initData && initData.hasOwnProperty('deletableCacheItems') && initData.deletableCacheItems) {\r\n                  options.deletableCacheItems = initData.deletableCacheItems;\r\n              }\r\n              /* ensure maxAge option exist and that it is a valid truthy */\r\n              if (initData && initData.hasOwnProperty('maxAge') && initData.maxAge) {\r\n                  options.maxAge = initData.maxAge;\r\n              }\r\n              /* specify storage to use and that cacheType specified is a valid truthy */\r\n              if (initData && initData.hasOwnProperty('cacheType') && initData.cacheType) {\r\n                 options.storage = initData.cacheType;\r\n                 \r\n                 // preprocessor handler for localIndexedDB\r\n                 var indexedDBPreprocessor = function (db) {\r\n                    $timeout(function() {\r\n                       deferred.resolve(db);\r\n                    });\r\n                    store = localIndexedDB;\r\n                    console.info(\"cacheType overriden as indexedDB\");\r\n                    console.log(localIndexedDB.dbName + \" indexedDB database opened\");\r\n                 };\r\n                 // preprocessor handler for localWebSQL\r\n                 var webSQLPreprocessor = function (db) {\r\n                    $timeout(function() {\r\n                       deferred.resolve(db);\r\n                    });\r\n                    store = localWebSQL;\r\n                    console.info(\"cacheType overriden as webSQL\");\r\n                    console.log(localWebSQL.dbName + \" webSQL database opened\");\r\n                 };\r\n                 // preprocessor handler for localStorageDB\r\n                 var localStoragePreprocessor = function (db) {\r\n                    $timeout(function() {\r\n                       deferred.resolve(db);\r\n                    });\r\n                    store = localStorageDB;\r\n                    console.info(\"cacheType overriden as localStorage\");\r\n                    console.log(localStorageDB.dbName + \" localStorage database opened\");\r\n                 };\r\n                 // preprocessor handler for localSessionStorage\r\n                 var sessionStoragePreprocessor = function (db) {\r\n                    $timeout(function() {\r\n                       deferred.resolve(db);\r\n                    });\r\n                    store = localSessionStorage;\r\n                    console.info(\"cacheType overriden as sessionStorage\");\r\n                    console.log(localSessionStorage.dbName + \" sessionStorage database opened\");\r\n                 };\r\n                 // preprocessor handler for POLY_FILL\r\n                 var polyFillPreprocessor = function () {\r\n                    $timeout(function() {\r\n                       deferred.resolve();\r\n                    });\r\n                    store = POLY_FILL;\r\n                    angular.toJson('store: ' + store);\r\n                    console.info(\"cacheType overriden as POLY_FILL\");\r\n                    console.log(POLY_FILL.dbName + \" POLY_FILL database opened\");\r\n                 };\r\n                 \r\n                 /* finalize storage initialization */\r\n                 try {\r\n                    switch (options.storage) {\r\n                       case \"indexedDB\":\r\n                             // fall through if IndexedDB storage is not supported or currently unavailable on client device\r\n                             $window.indexedDB = $window.IndexedDB || $window.mozIndexedDB || $window.webkitIndexedDB || $window.msIndexedDB;\r\n                             if ($window.indexedDB) {\r\n                                // update storage options\r\n                                localIndexedDB.options = options;\r\n                                localIndexedDB.open().then(function(lidb) {\r\n                                   if (lidb) {\r\n                                      indexedDBPreprocessor(lidb);\r\n                                   } else {\r\n                                      // update storage options\r\n                                      localWebSQL.options = options;\r\n                                      localWebSQL.open().then(function(lwdb) {\r\n                                         if (lwdb) {\r\n                                            webSQLPreprocessor(lwdb);\r\n                                         } else {\r\n                                            // update storage options\r\n                                            localStorageDB.options = options;\r\n                                            localStorageDB.open().then(function(lsdb) {\r\n                                               if (lsdb) {\r\n                                                  localStoragePreprocessor(lsdb);\r\n                                               } else {\r\n                                                  // update storage options\r\n                                                  localSessionStorage.options = options;\r\n                                                  localSessionStorage.open().then(function(lssdb) {\r\n                                                     if (lssdb) {\r\n                                                        sessionStoragePreprocessor(lssdb);\r\n                                                     } else {\r\n                                                        // update storage options\r\n                                                        POLY_FILL.options = options;\r\n                                                        polyFillPreprocessor();\r\n                                                     }\r\n                                                  });\r\n                                               }\r\n                                            });\r\n                                         }\r\n                                      });\r\n                                   }\r\n                                });\r\n                             }\r\n                             break;\r\n                          case \"webSQL\":\r\n                             // fall through if WebSQL storage is not supported or currently unavailable on client device\r\n                             if ($window.openDatabase) {\r\n                                // update storage options\r\n                                localWebSQL.options = options;\r\n                                localWebSQL.open().then(function(lwdb) {\r\n                                   if (lwdb) {\r\n                                      webSQLPreprocessor(lwdb);\r\n                                   } else {\r\n                                      // update storage options\r\n                                      localIndexedDB.options = options;\r\n                                      localIndexedDB.open().then(function(lidb) {\r\n                                         if (lidb) {\r\n                                            indexedDBPreprocessor(lidb);\r\n                                         } else {\r\n                                            // update storage options\r\n                                            localStorageDB.options = options;\r\n                                            localStorageDB.open().then(function(lsdb) {\r\n                                               if (lsdb) {\r\n                                                  localStoragePreprocessor(lsdb);\r\n                                               } else {\r\n                                                  // update storage options\r\n                                                  localSessionStorage.options = options;\r\n                                                  localSessionStorage.open().then(function(lssdb) {\r\n                                                     if (lssdb) {\r\n                                                        sessionStoragePreprocessor(lssdb);\r\n                                                     } else {\r\n                                                        // update storage options\r\n                                                        POLY_FILL.options = options;\r\n                                                        polyFillPreprocessor();\r\n                                                     }\r\n                                                  });\r\n                                               }\r\n                                            });\r\n                                         }\r\n                                      });\r\n                                   }\r\n                                });\r\n                             }\r\n                             break;\r\n                          case \"localStorage\":\r\n                             // fall through if localStorage storage is not supported or currently unavailable on client device\r\n                             if ($window.localStorage) {\r\n                                // update storage options\r\n                                localStorageDB.options = options;\r\n                                localStorageDB.open().then(function(lsdb) {\r\n                                   if (lsdb  && localStorageDB.db.save) {\r\n                                      localStoragePreprocessor(lsdb);\r\n                                   } else {\r\n                                      // update storage options\r\n                                      localIndexedDB.options = options;\r\n                                      localIndexedDB.open().then(function(lidb) {\r\n                                         if (lidb) {\r\n                                            indexedDBPreprocessor(lidb);\r\n                                         } else {\r\n                                            // update storage options\r\n                                            localWebSQL.options = options;\r\n                                            localWebSQL.open().then(function(lwdb) {\r\n                                               if (lwdb) {\r\n                                                  webSQLPreprocessor(lwdb);\r\n                                               } else {\r\n                                                  // update storage options\r\n                                                  localSessionStorage.options = options;\r\n                                                  localSessionStorage.open().then(function(lssdb) {\r\n                                                     if (lssdb) {\r\n                                                        sessionStoragePreprocessor(lssdb);\r\n                                                     } else {\r\n                                                        // update storage options\r\n                                                        POLY_FILL.options = options;\r\n                                                        polyFillPreprocessor();\r\n                                                     }\r\n                                                  });\r\n                                               }\r\n                                            });\r\n                                         }\r\n                                      });\r\n                                   }\r\n                                });\r\n                             }\r\n                             break;\r\n                       case \"sessionStorage\":\r\n                          // fall through if sessionStorage storage is not supported or currently unavailable on client device\r\n                             if ($window.sessionStorage) {\r\n                                // update storage options\r\n                                localSessionStorage.options = options;\r\n                                localSessionStorage.open().then(function(lssdb) {\r\n                                   if (lssdb  && localSessionStorage.db.save) {\r\n                                      sessionStoragePreprocessor(lssdb);\r\n                                   } else {\r\n                                      // update storage options\r\n                                      localIndexedDB.options = options;\r\n                                      localIndexedDB.open().then(function(lidb) {\r\n                                         if (lidb) {\r\n                                            indexedDBPreprocessor(lidb);\r\n                                         } else {\r\n                                            // update storage options\r\n                                            localWebSQL.options = options;\r\n                                            localWebSQL.open().then(function(lwdb) {\r\n                                               if (lwdb) {\r\n                                                  webSQLPreprocessor(lwdb);\r\n                                               } else {\r\n                                                  // update storage options\r\n                                                  localStorageDB.options = options;\r\n                                                  localStorageDB.open().then(function(lsdb) {\r\n                                                     if (lsdb) {\r\n                                                        localStoragePreprocessor(lsdb);\r\n                                                     } else {\r\n                                                        // update storage options\r\n                                                        POLY_FILL.options = options;\r\n                                                        polyFillPreprocessor();\r\n                                                     }\r\n                                                  });\r\n                                               }\r\n                                            });\r\n                                         }\r\n                                      });\r\n                                   }\r\n                                });\r\n                             }\r\n                             break;\r\n                       case \"polyFill\":\r\n                          // update storage options\r\n                          POLY_FILL.options = options;\r\n                          POLY_FILL.open().then(function() {\r\n                             polyFillPreprocessor();\r\n                          });\r\n                          break;\r\n                    }\r\n                    \r\n                    return deferred.promise;\r\n                 } catch(e) {\r\n                     store = POLY_FILL;\r\n                     // update storage options\r\n                     store.options = options;\r\n                     console.warn(\"chosen cacheType probably not supported...using POLY_FILL as fallback cacheType. error: \" + e);\r\n                 }\r\n              }\r\n           },\r\n           // cache data\r\n           save: function(key, value) {\r\n              return store.save(key, value);\r\n           },\r\n           // remove cached data\r\n           remove: function(key) {\r\n              return store.remove(key);\r\n           },\r\n           // retrieve cached data\r\n           get: function(key) {\r\n              return store.get(key);\r\n           },\r\n           // compute size of cached storage\r\n           length: function() {\r\n              return store.length();\r\n           },\r\n           // clear cache storage\r\n           clear: function() {\r\n              return store.clear();\r\n           }\r\n        };\r\n   };\r\n\r\n   // singleton copy\r\n   var singleton = repository();\r\n   \r\n   // extend cacheStorage\r\n   cacheStorage.prototype.instance = function(){\r\n      return repository();\r\n   };\r\n   \r\n   return {\r\n      getNewInstance : function() {\r\n         return new cacheStorage().instance();\r\n      },\r\n      create : function() {\r\n         return singleton;\r\n      }\r\n   };\r\n} ]);"],"sourceRoot":"/source/"}